// <auto-generated />
using System;
using Inzynierka.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inzynierka.Migrations
{
    [DbContext(typeof(AhoyDbContext))]
    [Migration("20250125172050_benneRemove")]
    partial class benneRemove
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Inzynierka.Data.Tables.Charters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("YachtId")
                        .HasColumnType("int");

                    b.Property<bool>("banned")
                        .HasColumnType("bit");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("YachtId");

                    b.ToTable("Charters");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CruisesId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Rating")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("YachtSaleId")
                        .HasColumnType("int");

                    b.Property<int?>("YachtsId")
                        .HasColumnType("int");

                    b.Property<bool>("banned")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CharterId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CruisesId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("YachtSaleId");

                    b.HasIndex("YachtsId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.CruiseJoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CapitanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CruiseId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapitanId");

                    b.HasIndex("CruiseId");

                    b.HasIndex("UserId");

                    b.ToTable("CruiseJoinRequest");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Cruises", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CapitanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("YachtId")
                        .HasColumnType("int");

                    b.Property<bool>("banned")
                        .HasColumnType("bit");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("destination")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("end_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("maxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("start_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapitanId");

                    b.HasIndex("YachtId");

                    b.ToTable("Cruises");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.CruisesParticipants", b =>
                {
                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CruisesId")
                        .HasColumnType("int");

                    b.HasKey("UsersId", "CruisesId");

                    b.HasIndex("CruisesId");

                    b.ToTable("CruisesParticipants");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.FavoriteCruises", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CruiseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CruiseId");

                    b.HasIndex("CruiseId");

                    b.ToTable("FavoriteCruises");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.FavoriteYachtsForSale", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("YachtSaleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "YachtSaleId");

                    b.HasIndex("YachtSaleId");

                    b.ToTable("FavoriteYachtsForSale");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("YachtSaleId")
                        .HasColumnType("int");

                    b.Property<bool>("banned")
                        .HasColumnType("bit");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("YachtSaleId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Reports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentVerificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModeratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SuspectCharterId")
                        .HasColumnType("int");

                    b.Property<int?>("SuspectCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("SuspectCruiseId")
                        .HasColumnType("int");

                    b.Property<Guid?>("SuspectRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuspectUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SuspectYachtId")
                        .HasColumnType("int");

                    b.Property<int?>("SuspectYachtSaleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DocumentVerificationId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("SuspectCharterId");

                    b.HasIndex("SuspectCommentId");

                    b.HasIndex("SuspectCruiseId");

                    b.HasIndex("SuspectRoleId");

                    b.HasIndex("SuspectUserId");

                    b.HasIndex("SuspectYachtId");

                    b.HasIndex("SuspectYachtSaleId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharterId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CharterId");

                    b.HasIndex("UserId");

                    b.ToTable("Resservation");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("certificates")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotosId")
                        .HasColumnType("int");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("aboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("age")
                        .HasColumnType("datetime2");

                    b.Property<bool>("banned")
                        .HasColumnType("bit");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("lastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("reasonBan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhotosId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.YachtSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("BuyerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("YachtId")
                        .HasColumnType("int");

                    b.Property<bool>("banned")
                        .HasColumnType("bit");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("saleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("YachtId");

                    b.ToTable("YachtSale");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Yachts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("banned")
                        .HasColumnType("bit");

                    b.Property<int>("beds")
                        .HasColumnType("int");

                    b.Property<int>("cabins")
                        .HasColumnType("int");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<int>("crew")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("length")
                        .HasColumnType("float");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("showers")
                        .HasColumnType("int");

                    b.Property<int>("toilets")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("width")
                        .HasColumnType("float");

                    b.Property<DateTime>("year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Yachts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Charters", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Users", "Owner")
                        .WithMany("Charters")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inzynierka.Data.Tables.Yachts", "Yacht")
                        .WithMany("Charters")
                        .HasForeignKey("YachtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");

                    b.Navigation("Yacht");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Comments", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Charters", "Charter")
                        .WithMany("Comments")
                        .HasForeignKey("CharterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.Users", "Creator")
                        .WithMany("CommentsAsCreator")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inzynierka.Data.Tables.Cruises", "Cruises")
                        .WithMany("Comments")
                        .HasForeignKey("CruisesId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.Users", "Profile")
                        .WithMany("CommentsAsProfile")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.YachtSale", "YachtSale")
                        .WithMany("Comments")
                        .HasForeignKey("YachtSaleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.Yachts", "Yachts")
                        .WithMany("Comments")
                        .HasForeignKey("YachtsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Charter");

                    b.Navigation("Creator");

                    b.Navigation("Cruises");

                    b.Navigation("Profile");

                    b.Navigation("YachtSale");

                    b.Navigation("Yachts");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.CruiseJoinRequest", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Users", "Capitan")
                        .WithMany("CruiseJoinRequestsAsCapitan")
                        .HasForeignKey("CapitanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inzynierka.Data.Tables.Cruises", "Cruise")
                        .WithMany("CruiseJoinRequests")
                        .HasForeignKey("CruiseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inzynierka.Data.Tables.Users", "User")
                        .WithMany("CruiseJoinRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Capitan");

                    b.Navigation("Cruise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Cruises", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Users", "Capitan")
                        .WithMany("Cruises")
                        .HasForeignKey("CapitanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inzynierka.Data.Tables.Yachts", "Yacht")
                        .WithMany("Cruises")
                        .HasForeignKey("YachtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Capitan");

                    b.Navigation("Yacht");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.CruisesParticipants", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Cruises", "Cruises")
                        .WithMany("CruisesParticipants")
                        .HasForeignKey("CruisesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inzynierka.Data.Tables.Users", "Users")
                        .WithMany("CruisesParticipants")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cruises");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.FavoriteCruises", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Cruises", "Cruise")
                        .WithMany("FavoriteCruises")
                        .HasForeignKey("CruiseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inzynierka.Data.Tables.Users", "User")
                        .WithMany("FavoriteCruises")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cruise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.FavoriteYachtsForSale", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Users", "User")
                        .WithMany("FavoriteYachtsForSale")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inzynierka.Data.Tables.YachtSale", "YachtForSale")
                        .WithMany("FavoriteYachtsForSale")
                        .HasForeignKey("YachtSaleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("YachtForSale");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Image", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.YachtSale", null)
                        .WithMany("Images")
                        .HasForeignKey("YachtSaleId");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Notifications", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Users", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Reports", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Users", "Creator")
                        .WithMany("CreatorReports")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.Roles", "DocumentVerification")
                        .WithMany("VeryficationReports")
                        .HasForeignKey("DocumentVerificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.Users", "Moderator")
                        .WithMany("ModeratorReports")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.Charters", "SuspectCharter")
                        .WithMany("Reports")
                        .HasForeignKey("SuspectCharterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inzynierka.Data.Tables.Comments", "SuspectComment")
                        .WithMany("Reports")
                        .HasForeignKey("SuspectCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.Cruises", "SuspectCruise")
                        .WithMany("Reports")
                        .HasForeignKey("SuspectCruiseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inzynierka.Data.Tables.Roles", "SuspectRole")
                        .WithMany("SuspectReports")
                        .HasForeignKey("SuspectRoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.Users", "SuspectUser")
                        .WithMany("SuspectUserReports")
                        .HasForeignKey("SuspectUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.Yachts", "SuspectYacht")
                        .WithMany("Reports")
                        .HasForeignKey("SuspectYachtId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.YachtSale", "SuspectYachtSale")
                        .WithMany("Reports")
                        .HasForeignKey("SuspectYachtSaleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("DocumentVerification");

                    b.Navigation("Moderator");

                    b.Navigation("SuspectCharter");

                    b.Navigation("SuspectComment");

                    b.Navigation("SuspectCruise");

                    b.Navigation("SuspectRole");

                    b.Navigation("SuspectUser");

                    b.Navigation("SuspectYacht");

                    b.Navigation("SuspectYachtSale");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Reservation", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Charters", "Charter")
                        .WithMany("Reservations")
                        .HasForeignKey("CharterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inzynierka.Data.Tables.Users", "User")
                        .WithMany("Reservation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Charter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Users", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Image", "Photos")
                        .WithMany("Users")
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.YachtSale", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Users", "BuyerUser")
                        .WithMany("YachtSalesAsSeller")
                        .HasForeignKey("BuyerUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.Users", "Owner")
                        .WithMany("YachtSalesAsBuyer")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inzynierka.Data.Tables.Yachts", "Yacht")
                        .WithMany("YachtSale")
                        .HasForeignKey("YachtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuyerUser");

                    b.Navigation("Owner");

                    b.Navigation("Yacht");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Yachts", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Image", "Image")
                        .WithMany("Yachts")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inzynierka.Data.Tables.Users", "Owner")
                        .WithMany("Yachts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inzynierka.Data.Tables.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Inzynierka.Data.Tables.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Charters", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reports");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Comments", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Cruises", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CruiseJoinRequests");

                    b.Navigation("CruisesParticipants");

                    b.Navigation("FavoriteCruises");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Image", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("Yachts");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Roles", b =>
                {
                    b.Navigation("SuspectReports");

                    b.Navigation("VeryficationReports");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Users", b =>
                {
                    b.Navigation("Charters");

                    b.Navigation("CommentsAsCreator");

                    b.Navigation("CommentsAsProfile");

                    b.Navigation("CreatorReports");

                    b.Navigation("CruiseJoinRequests");

                    b.Navigation("CruiseJoinRequestsAsCapitan");

                    b.Navigation("Cruises");

                    b.Navigation("CruisesParticipants");

                    b.Navigation("FavoriteCruises");

                    b.Navigation("FavoriteYachtsForSale");

                    b.Navigation("ModeratorReports");

                    b.Navigation("Notifications");

                    b.Navigation("Reservation");

                    b.Navigation("SuspectUserReports");

                    b.Navigation("YachtSalesAsBuyer");

                    b.Navigation("YachtSalesAsSeller");

                    b.Navigation("Yachts");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.YachtSale", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoriteYachtsForSale");

                    b.Navigation("Images");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Inzynierka.Data.Tables.Yachts", b =>
                {
                    b.Navigation("Charters");

                    b.Navigation("Comments");

                    b.Navigation("Cruises");

                    b.Navigation("Reports");

                    b.Navigation("YachtSale");
                });
#pragma warning restore 612, 618
        }
    }
}
